#!/bin/bash
# fref - File Reference tool for quickly finding and referencing files
# Usage: fref [search_term]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}fref - File Reference Tool${NC}"
    echo ""
    echo "Usage:"
    echo "  fref              # Interactive file finder"
    echo "  fref <term>       # Search for files containing term"
    echo "  fref -h, --help   # Show this help"
    echo ""
    echo "Features:"
    echo "  â€¢ File preview with syntax highlighting"
    echo "  â€¢ Automatic clipboard copy"
    echo "  â€¢ Respects .gitignore"
    echo "  â€¢ Fast search with fd/ripgrep when available"
    echo ""
    echo "Keybindings:"
    echo "  CTRL-/ : Toggle preview"
    echo "  Enter  : Select file and copy path"
    echo "  Esc    : Exit"
}

# Check for help flags
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Function to copy to clipboard
copy_to_clipboard() {
    local text="$1"
    if command -v pbcopy >/dev/null 2>&1; then
        echo "$text" | pbcopy
        echo -e "${GREEN}ðŸ“‹ Path copied to clipboard!${NC}"
    elif command -v xclip >/dev/null 2>&1; then
        echo "$text" | xclip -selection clipboard
        echo -e "${GREEN}ðŸ“‹ Path copied to clipboard!${NC}"
    elif command -v wl-copy >/dev/null 2>&1; then
        echo "$text" | wl-copy
        echo -e "${GREEN}ðŸ“‹ Path copied to clipboard!${NC}"
    fi
}

# File finder function
find_files() {
    local file
    local preview_cmd
    
    # Choose preview command
    if command -v bat >/dev/null 2>&1; then
        preview_cmd='bat --style=numbers --color=always --line-range :500 {} 2>/dev/null'
    else
        preview_cmd='cat {} 2>/dev/null'
    fi
    
    if command -v fd >/dev/null 2>&1; then
        # Use fd if available (faster and respects .gitignore)
        file=$(fd --type f --hidden --follow --exclude .git --exclude node_modules --exclude .DS_Store | fzf \
            --preview "$preview_cmd || echo 'Binary file'" \
            --preview-window=right:60%:wrap \
            --bind 'ctrl-/:toggle-preview' \
            --header 'CTRL-/ to toggle preview, Enter to select file' \
            --border \
            --height 80%)
    else
        # Fallback to find
        file=$(find . -type f -not -path '*/\.git/*' -not -path '*/node_modules/*' -not -name '.DS_Store' | fzf \
            --preview "$preview_cmd || echo 'Binary file'" \
            --preview-window=right:60%:wrap \
            --bind 'ctrl-/:toggle-preview' \
            --header 'CTRL-/ to toggle preview, Enter to select file' \
            --border \
            --height 80%)
    fi
    
    if [[ -n "$file" ]]; then
        echo -e "${BLUE}Selected file:${NC} $file"
        copy_to_clipboard "$file"
        
        # Also show some info about the file
        if [[ -f "$file" ]]; then
            echo -e "${YELLOW}File info:${NC}"
            ls -lh "$file"
        fi
    fi
}

# Content search function
search_content() {
    local query="$1"
    local result
    
    echo -e "${BLUE}Searching for:${NC} $query"
    
    if command -v rg >/dev/null 2>&1; then
        # Use ripgrep if available
        result=$(rg --color=always --line-number --no-heading --smart-case "$query" | fzf \
            --ansi \
            --delimiter : \
            --preview 'bat --style=numbers --color=always --highlight-line {2} {1} 2>/dev/null || cat {1}' \
            --preview-window=right:60%:wrap \
            --bind 'ctrl-/:toggle-preview' \
            --header 'CTRL-/ to toggle preview, Enter to select' \
            --border \
            --height 80%)
    elif command -v ag >/dev/null 2>&1; then
        # Use silver searcher if available
        result=$(ag --color --line-number "$query" | fzf \
            --ansi \
            --delimiter : \
            --preview 'bat --style=numbers --color=always --highlight-line {2} {1} 2>/dev/null || cat {1}' \
            --preview-window=right:60%:wrap \
            --bind 'ctrl-/:toggle-preview' \
            --header 'CTRL-/ to toggle preview, Enter to select' \
            --border \
            --height 80%)
    else
        # Fallback to grep
        result=$(grep -r --line-number --color=always "$query" . 2>/dev/null | fzf \
            --ansi \
            --delimiter : \
            --preview 'bat --style=numbers --color=always --highlight-line {2} {1} 2>/dev/null || cat {1}' \
            --preview-window=right:60%:wrap \
            --bind 'ctrl-/:toggle-preview' \
            --header 'CTRL-/ to toggle preview, Enter to select' \
            --border \
            --height 80%)
    fi
    
    if [[ -n "$result" ]]; then
        local file=$(echo "$result" | cut -d: -f1)
        local line=$(echo "$result" | cut -d: -f2)
        echo -e "${BLUE}Found in:${NC} $file:$line"
        copy_to_clipboard "$file"
    fi
}

# Main logic
if [[ $# -eq 0 ]]; then
    # No arguments - show file finder
    find_files
else
    # Search for content
    search_content "$*"
fi
