" Helix-style selection-first IdeaVim config

" ========= Base / Plugins =========
set scrolloff=10 showmode showcmd
set smartcase incsearch hlsearch relativenumber number visualbell
set clipboard+=unnamed
let mapleader = " "
set surround | set highlightedyank | set nerdtree | set easymotion
set which-key | set notimeout

" ========= QoL / Basic =========
inoremap jj <Esc>
" Make 'd' delete current character without yanking (more Helix-like)
nnoremap d "_x

" Tabs / Panes
nnoremap <A-n> :tabnext<CR> | nnoremap <A-p> :tabprev<CR>
nnoremap <A-h> <C-w>h | nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k | nnoremap <A-l> <C-w>l

" Popup completion navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

" ========= Selection-first motions (Helix-like) =========
" Caret motions extend selection
nnoremap h :action EditorLeft<CR>
nnoremap l :action EditorRight<CR>
nnoremap j :action EditorDown<CR>
nnoremap k :action EditorUp<CR>
nnoremap 0 :action EditorLineStart<CR>
nnoremap ^ :action EditorLineStart<CR>
nnoremap $ :action EditorLineEnd<CR>
nnoremap gg :action EditorTextStart<CR>
nnoremap G  :action EditorTextEnd<CR>
nnoremap t v$h

" Word motions extend selection
nnoremap w :action EditorNextWordWithSelection<CR>
nnoremap b :action EditorPreviousWordWithSelection<CR>

" Line bounds helpers
nnoremap gh :action EditorLineStartWithSelection<CR>
nnoremap gl :action EditorLineEndWithSelection<CR>
nnoremap gs ^

" Screen positions (top/center/bottom)
nnoremap gt :action EditorMoveToPageTopWithSelection<CR>
nnoremap gc :action EditorScrollToCenter<CR>
nnoremap gb :action EditorMoveToPageBottomWithSelection<CR>

" Word motions extend selection
nnoremap w :action EditorNextWordWithSelection<CR>
nnoremap b :action EditorPreviousWordWithSelection<CR>

" Line bounds helpers
nnoremap gh :action EditorLineStartWithSelection<CR>
nnoremap gl :action EditorLineEndWithSelection<CR>
nnoremap gs ^

" Screen positions (top/center/bottom)
nnoremap gt :action EditorMoveToPageTopWithSelection<CR>
nnoremap gc :action EditorScrollToCenter<CR>
nnoremap gb :action EditorMoveToPageBottomWithSelection<CR>

" ========= Easy indentation / macros =========
vnoremap < <gv
vnoremap > >gv
nnoremap qj @q

" ========= Method navigation =========
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" ========= Matching / Surround =========
nnoremap mm :action EditorMatchBrace<CR>
vnoremap mm :action EditorMatchBrace<CR>

unmap ds
map md <Plug>DSurround
map mr <Plug>CSurround
map ms <Plug>YSurround

" ========= Blocks / Structure (Helix [p ]p / [m ]m) =========
nnoremap [p :action EditorCodeBlockStartWithSelection<CR>
nnoremap ]p :action EditorCodeBlockEndWithSelection<CR>
vnoremap [p :action EditorCodeBlockStartWithSelection<CR>
vnoremap ]p :action EditorCodeBlockEndWithSelection<CR>
nnoremap ]m :action EditorCodeBlockEndWithSelection<CR>
vnoremap ]m :action EditorCodeBlockEndWithSelection<CR>
nnoremap [m :action EditorCodeBlockStartWithSelection<CR>
vnoremap [m :action EditorCodeBlockStartWithSelection<CR>

" ========= Unimpaired-style =========
" Functions
nnoremap ]f :action MethodDown<CR>
nnoremap [f :action MethodUp<CR>
" VCS changes
nnoremap ]g :action VcsShowNextChangeMarker<CR>
nnoremap [g :action VcsShowPrevChangeMarker<CR>

" Diagnostics (no ReSharper)
nnoremap ]d :action GotoNextError<CR>
nnoremap [d :action GotoPreviousError<CR>

" ========= Search / Labeled jump =========
" Select next/prev match (Helix multi-select feel)
nnoremap n gn | nnoremap N gN
vnoremap n <ESC>gn | vnoremap N <ESC>gN
" f/t repeat like Helix Alt-. / Alt-,
nnoremap <A-.> ;
nnoremap <A-,> ,

" EasyMotion labels for goto word
nnoremap gw <Plug>(easymotion-s)

" Diagnostics (no ReSharper)
nnoremap ]d :action GotoNextError<CR>
nnoremap [d :action GotoPreviousError<CR>

" ========= Search / Labeled jump =========
" Select next/prev match (Helix multi-select feel)
nnoremap n gn | nnoremap N gN
vnoremap n <ESC>gn | vnoremap N <ESC>gN
" f/t repeat like Helix Alt-. / Alt-,
nnoremap <A-.> ;
nnoremap <A-,> ,
" EasyMotion labels for goto word
nnoremap gw <Plug>(easymotion-s)

" ========= Goto / LSP =========
nnoremap gd :action GotoDeclaration<CR>
nnoremap gy :action GotoTypeDeclaration<CR>
nnoremap gr :action FindUsages<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap g. :action JumpToLastChange<CR>
" Recent buffer toggles / buffer nav
nnoremap ga :b#<CR> | nnoremap gm :b#<CR>
nnoremap gn :bnext<CR> | nnoremap gp :bprev<CR>
" Select word (textobject-ish helper)
nnoremap maw :action EditorSelectWord<CR>

" ========= Space-mode (pickers / actions) =========
nnoremap <leader>/ :action FindInPath<CR>
nnoremap <leader>f :action GotoFile<CR>
nnoremap <leader>b :action RecentFiles<CR>
nnoremap <leader>s :action FileStructurePopup<CR>
nnoremap <leader>S :action GotoSymbol<CR>
nnoremap <leader>k :action QuickJavaDoc<CR>
nnoremap <leader>a :action ShowIntentionActions<CR>
nnoremap <leader>r :action RenameElement<CR>
nnoremap <leader>d :action ActivateProblemsViewToolWindow<CR>

" ========= Window mgmt (fixed conflicts) =========
nnoremap <leader>wv :action SplitVertically<CR>
nnoremap <leader>ws :action SplitHorizontally<CR>
nnoremap <leader>wo :action CloseAllEditorsButActive<CR>
nnoremap <leader>wq :action CloseAllEditors<CR>
nnoremap <leader>wh <C-w>h | nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k | nnoremap <leader>wl <C-w>l

" ========= Terminal / Tools / Git =========
map <leader>t :action ActivateTerminalToolWindow<CR>
map <C-c> <action>(CommentByLineComment)

" EasyMotion quick-jump
map <leader>j <Plug>(easymotion-s)

" NERDTree (q to close)
map <leader>n :NERDTreeToggle<CR>

" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Display toggles
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)

" Refactoring quicklist / actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)

" Diagnostics leaders (core IDE)
nnoremap <leader>en :action GotoNextError<CR>
nnoremap <leader>ep :action GotoPreviousError<CR>

" ========= Multi-line / Multi-caret editing =========
" Clone carets
nnoremap C :action EditorCloneCaretBelow<CR>
nnoremap <A-C> :action EditorCloneCaretAbove<CR>
" Select next/prev/all occurrences (native)
nnoremap <C-n> :action SelectNextOccurrence<CR>
nnoremap g<C-p> :action UnselectPreviousOccurrence<CR>
nnoremap g<S-C-n> :action SelectAllOccurrences<CR>

" Expand / shrink selection (Helix Alt-o / Alt-i feel)
nnoremap <A-o> :action EditorSelectWord<CR>
nnoremap <A-i> :action EditorUnSelectWord<CR>
vnoremap <A-o> :action EditorSelectWord<CR>
vnoremap <A-i> :action EditorUnSelectWord<CR>

" ========= Misc =========
" Undo tree redo (keep Vim's U -> redo muscle memory)
nnoremap U <C-R>

" Jump between methods (already above via [[ and ]])

" Helix-style X/x (line-wise selection/extension)
nnoremap X :action EditorSelectLine<CR>
vnoremap X :action EditorSelectLine<CR>
nnoremap x :action EditorSelectLine<CR>
vnoremap x :action EditorSelectLine<CR>
